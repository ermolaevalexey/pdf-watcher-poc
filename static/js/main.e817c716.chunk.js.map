{"version":3,"sources":["../node_modules/react-pdf/node_modules/pdfjs-dist/build sync","ReactPdfWatcher.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","ReactPdfWatcher","props","useState","binaryFile","setBinaryFile","pagesCount","setPagesCount","containerRef","useRef","updateBinary","useCallback","a","url","fileUrl","fetch","headers","then","response","blob","file","updatePagesCount","numPages","useEffect","ref","className","onLoadSuccess","renderMode","range","map","pageNumber","key","width","current","clientWidth","pdfJs","GlobalWorkerOptions","workerSrc","version","App","setUrl","updateUrl","currentTarget","value","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,oVCWlB,SAASC,EAAgBC,GAA8B,IAAD,EACvBC,mBAAsB,MADC,mBACpDC,EADoD,KACxCC,EADwC,OAEvBF,mBAAiB,GAFM,mBAEpDG,EAFoD,KAExCC,EAFwC,KAGrDC,EAAeC,iBAAuB,MAEtCC,EAAeC,sBAAW,sBAAC,4BAAAC,EAAA,sEAblBC,EAccX,EAAMY,QAb5BC,MAAMF,EAAK,CAChBG,QAAS,CACP,OAAU,qBAEXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAQI,OACzBC,EADyB,OAE/Bf,EAAce,GAFiB,iCAbnC,IAAiBP,IAakB,OAG9B,CAACX,EAAMY,UAEJO,EAAmBV,uBAAY,YAA2C,IAAxCW,EAAuC,EAAvCA,SACtCf,EAAce,KACb,CAACf,IAQJ,OANAgB,qBAAU,WACR,sBAAC,sBAAAX,EAAA,sEACOF,IADP,0CAAD,KAGC,CAACA,IAEIN,GACN,yBAAKoB,IAAKhB,GACR,kBAAC,WAAD,CACEiB,UAAU,WACVL,KAAMhB,EACNsB,cAAeL,EACfM,WAAW,SAERrB,GAAcsB,gBAAM,EAAGtB,EAAa,GAAGuB,KAAI,SAACC,GAAD,OAC5C,kBAAC,OAAD,CACEL,UAAU,OACVM,IAAKD,EACLA,WAAYA,EACZE,MAAQxB,EAAayB,SAAWzB,EAAayB,QAASC,aAAgB,SA/ClFC,QAAMC,oBAAoBC,UAA1B,wDAAuFF,QAAMG,QAA7F,kBCqCeC,MAtCf,WAAgB,IAAD,EACSpC,mBAAS,IADlB,mBACNU,EADM,KACD2B,EADC,KAGPC,EAAY9B,uBAAY,SAAClB,GAC7B+C,EAAO/C,EAAEiD,cAAcC,SACtB,CAAC9B,EAAK2B,IAET,OACE,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,gDAEF,yBAAKA,UAAU,eACb,oEACA,yCACA,wBAAIA,UAAU,SACZ,4BAAI,0HACJ,4BAAI,4HACJ,4BAAI,yHACJ,4BAAI,oGACJ,4BAAI,oHAEN,yBAAKA,UAAU,YACb,2BAAOmB,KAAK,OAAOD,MAAO9B,EAAKgC,SAAUJ,IACzC,0BAAMhB,UAAU,cAAhB,mEAEF,yBAAKA,UAAU,qBACZZ,GACC,kBAAC,EAAD,CACEC,QAASD,QCrBHiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e817c716.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 22;","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { range } from 'lodash';\nimport { Document, Page, pdfjs as pdfJs } from 'react-pdf';\nimport './ReactPdfWatcher.css';\n\npdfJs.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfJs.version}/pdf.worker.js`;\n\nexport interface ReactPdfWatcherProps {\n  fileUrl: string;\n}\n\nfunction getFile(url: string) {\n  return fetch(url, {\n    headers: {\n      'Accept': 'application/pdf'\n    }\n  }).then(response => response.blob());\n}\n\nexport function ReactPdfWatcher(props: ReactPdfWatcherProps) {\n  const [binaryFile, setBinaryFile] = useState<Blob | null>(null);\n  const [pagesCount, setPagesCount] = useState<number>(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const updateBinary = useCallback(async () => {\n    const file = await getFile(props.fileUrl);\n    setBinaryFile(file);\n  }, [props.fileUrl]);\n\n  const updatePagesCount = useCallback(({ numPages }: pdfJs.PDFDocumentProxy) => {\n    setPagesCount(numPages);\n  }, [setPagesCount]);\n\n  useEffect(() => {\n    (async () => {\n      await updateBinary();\n    })();\n  }, [updateBinary]);\n\n  return (binaryFile &&\n    <div ref={containerRef}>\n      <Document\n        className=\"document\"\n        file={binaryFile}\n        onLoadSuccess={updatePagesCount}\n        renderMode=\"svg\"\n      >\n        {!!pagesCount && range(1, pagesCount + 1).map((pageNumber) =>\n          <Page\n            className=\"page\"\n            key={pageNumber}\n            pageNumber={pageNumber}\n            width={(containerRef.current && containerRef.current!.clientWidth) || 0}\n          />\n        )}\n      </Document>\n    </div>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport './App.css';\nimport { ReactPdfWatcher } from './ReactPdfWatcher';\n\nfunction App() {\n  const [url, setUrl] = useState('');\n\n  const updateUrl = useCallback((e: React.SyntheticEvent<HTMLInputElement>) => {\n    setUrl(e.currentTarget.value);\n  }, [url, setUrl]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>PDF watcher POC</h1>\n      </header>\n      <div className=\"App-Content\">\n        <h2>Enter a URL with PDF file of choice*</h2>\n        <h3>Examples:</h3>\n        <ul className=\"links\">\n          <li><code>https://raw.githubusercontent.com/diegomura/react-pdf/master/examples/resume/output.pdf</code></li>\n          <li><code>https://raw.githubusercontent.com/diegomura/react-pdf/master/examples/pageWrap/output.pdf</code></li>\n          <li><code>https://raw.githubusercontent.com/diegomura/react-pdf/master/examples/knobs/output.pdf</code></li>\n          <li><code>https://ermolaevalexey.github.io/pdf-watcher-poc/a-sample-pdf.pdf</code></li>\n          <li><code>https://ermolaevalexey.github.io/pdf-watcher-poc/gre_research_validity_data.pdf`</code></li>\n        </ul>\n        <div className=\"App-Form\">\n          <input type=\"text\" value={url} onChange={updateUrl} />\n          <span className=\"disclaimer\">*External urls will work only with allowed cross-domain access</span>\n        </div>\n        <div className=\"Watcher-container\">\n          {url &&\n            <ReactPdfWatcher\n              fileUrl={url}\n            />\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}